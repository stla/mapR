% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/omapR.R
\name{omapR}
\alias{omapR}
\title{R6 class representing an ordered map}
\description{
A map is given by keys and values.
}
\examples{

## ------------------------------------------------
## Method `omapR$new`
## ------------------------------------------------

omapR$new(
  keys = c("z", "a"), 
  values = list(c(1, 2), c(3, 4, 5))
)
# examples with duplicated keys:
omapR$new(
  keys = c("a", "a", "b"), 
  values = list(c(1, 2), c(3, 4), c(5, 6))
)
omapR$new(
  keys = c("a", "a", "b"), 
  values = list(c(1, 2), c(3, 4), c(5, 6)),
  duplicated = "join"
)
omapR$new(
  keys = c("a", "a", "b"), 
  values = list(c(1, 2), c(3, 4), c(5, 6)),
  duplicated = "separate"
)

## ------------------------------------------------
## Method `omapR$size`
## ------------------------------------------------

map <- omapR$new(
  keys = c("a", "b"), values = list(c(1, 2), c(3, 4, 5))
)
map$size()

## ------------------------------------------------
## Method `omapR$keys`
## ------------------------------------------------

map <- omapR$new(
  keys = c("a", "b"), values = list(c(1, 2), c(3, 4, 5))
)
map$keys()

## ------------------------------------------------
## Method `omapR$values`
## ------------------------------------------------

map <- omapR$new(
  keys = c("a", "b"), values = list(c(1, 2), c(3, 4, 5))
)
map$values()

## ------------------------------------------------
## Method `omapR$items`
## ------------------------------------------------

map <- omapR$new(
  keys = c("a", "b"), values = list(c(1, 2), c(3, 4, 5))
)
map$items()

## ------------------------------------------------
## Method `omapR$toList`
## ------------------------------------------------

map <- omapR$new(
  keys = c("a", "b"), values = list(c(1, 2), c(3, 4, 5))
)
map$toList()

## ------------------------------------------------
## Method `omapR$at`
## ------------------------------------------------

map <- omapR$new(
  keys = c("a", "b"), values = list(c(1, 2), c(3, 4, 5))
)
map$at("b")
map$at("x", stop_if_not_found = FALSE)

## ------------------------------------------------
## Method `omapR$index`
## ------------------------------------------------

map <- omapR$new(
  keys = c("a", "b"), values = list(c(1, 2), c(3, 4, 5))
)
map$index("b")
map$index("x")

## ------------------------------------------------
## Method `omapR$extract`
## ------------------------------------------------

map <- omapR$new(
  keys = c("a", "b", "c"), 
  values = list(c(1, 2), c(3, 4, 5), c(6, 7))
)
map_copy <- map$copy()
map$extract(c("a", "c"))
map
map$extract(c("a", "c"), inplace = TRUE)
map
map_copy$extract(c("a", "c"), bydeleting = TRUE)
map_copy
map_copy$extract(c("a", "c"), inplace = TRUE, bydeleting = TRUE)
map_copy

## ------------------------------------------------
## Method `omapR$has_key`
## ------------------------------------------------

map <- omapR$new(
  keys = c("a", "b"), 
  values = list(c(1, 2), c(3, 4, 5))
)
map$has_key("b")
map$has_key("x")

## ------------------------------------------------
## Method `omapR$nth`
## ------------------------------------------------

map <- omapR$new(
  keys = c("a", "b"), values = list(c(1, 2), c(3, 4, 5))
)
map$nth(2)
map$nth(9, stop_if_too_large = FALSE)

## ------------------------------------------------
## Method `omapR$insert`
## ------------------------------------------------

map <- omapR$new(
  keys = c("a", "b"), 
  values = list(c(1, 2), c(3, 4, 5))
)
map$insert("c", c(6, 7))
map
map$insert("a", c(8, 9))
map
map$insert("a", c(8, 9), replace = TRUE)
map

## ------------------------------------------------
## Method `omapR$erase`
## ------------------------------------------------

map <- omapR$new(
  keys = c("a", "b", "c"), 
  values = list(c(1, 2), c(3, 4, 5), c(6, 7))
)
map$erase("a")
map
map$erase(c("b", "c"))
map

## ------------------------------------------------
## Method `omapR$merge`
## ------------------------------------------------

map1 <- omapR$new(
  keys = c("a", "b"), values = list(c(1, 2), c(3, 4, 5))
)
map2 <- omapR$new(
  keys = c("c", "d"), values = list(c(9, 8), c(7, 6))
)
map1$merge(map2)
map1

# `duplicated` example ####
map1 <- omapR$new(
  keys = c("a", "b"), values = list(c(1, 2), c(3, 4, 5))
)
map1_copy1 <- map1$copy()
map1_copy2 <- map1$copy()
map1_copy3 <- map1$copy()
map2 <- omapR$new(
  keys = c("a", "d"), values = list(c(9, 8), c(7, 6))
)
map1_copy1$merge(map2)
map1_copy1

map1_copy2$merge(map2, duplicated = "join")
map1_copy2

map1_copy3$merge(map2, duplicated = "separate")
map1_copy3

## ------------------------------------------------
## Method `omapR$copy`
## ------------------------------------------------

map <- omapR$new(
  c("a", "b"), 
  list(c(1,2), c(FALSE, TRUE))
)
true_copy <- map$copy()
true_copy$erase("a")
map
naive_copy <- map
naive_copy$erase("a")
map
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{omapR$new()}}
\item \href{#method-print}{\code{omapR$print()}}
\item \href{#method-size}{\code{omapR$size()}}
\item \href{#method-keys}{\code{omapR$keys()}}
\item \href{#method-values}{\code{omapR$values()}}
\item \href{#method-items}{\code{omapR$items()}}
\item \href{#method-toList}{\code{omapR$toList()}}
\item \href{#method-at}{\code{omapR$at()}}
\item \href{#method-index}{\code{omapR$index()}}
\item \href{#method-extract}{\code{omapR$extract()}}
\item \href{#method-has_key}{\code{omapR$has_key()}}
\item \href{#method-nth}{\code{omapR$nth()}}
\item \href{#method-insert}{\code{omapR$insert()}}
\item \href{#method-erase}{\code{omapR$erase()}}
\item \href{#method-merge}{\code{omapR$merge()}}
\item \href{#method-copy}{\code{omapR$copy()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Creates a new \code{omapR} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{omapR$new(keys, values, duplicated = "drop", checks = TRUE, ptr = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{keys}}{keys, a character vector without \code{NA} value}

\item{\code{values}}{values, a list of R objects; \code{keys} and 
\code{values} must have the same length}

\item{\code{duplicated}}{the action to perform for duplicated keys, one of 
\code{"drop"}, \code{"join"}, or \code{"separate"}}

\item{\code{checks}}{Boolean, whether to check \code{keys} and \code{values}}

\item{\code{ptr}}{an external pointer; this is for internal use only}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
An \code{omapR} object.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{omapR$new(
  keys = c("z", "a"), 
  values = list(c(1, 2), c(3, 4, 5))
)
# examples with duplicated keys:
omapR$new(
  keys = c("a", "a", "b"), 
  values = list(c(1, 2), c(3, 4), c(5, 6))
)
omapR$new(
  keys = c("a", "a", "b"), 
  values = list(c(1, 2), c(3, 4), c(5, 6)),
  duplicated = "join"
)
omapR$new(
  keys = c("a", "a", "b"), 
  values = list(c(1, 2), c(3, 4), c(5, 6)),
  duplicated = "separate"
)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-print"></a>}}
\if{latex}{\out{\hypertarget{method-print}{}}}
\subsection{Method \code{print()}}{
Show instance of a \code{omapR} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{omapR$print(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{ignored}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-size"></a>}}
\if{latex}{\out{\hypertarget{method-size}{}}}
\subsection{Method \code{size()}}{
Size of the reference map.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{omapR$size()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
An integer, the number of entries.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{map <- omapR$new(
  keys = c("a", "b"), values = list(c(1, 2), c(3, 4, 5))
)
map$size()
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-keys"></a>}}
\if{latex}{\out{\hypertarget{method-keys}{}}}
\subsection{Method \code{keys()}}{
Get all keys.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{omapR$keys()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
The keys, a character vector.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{map <- omapR$new(
  keys = c("a", "b"), values = list(c(1, 2), c(3, 4, 5))
)
map$keys()
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-values"></a>}}
\if{latex}{\out{\hypertarget{method-values}{}}}
\subsection{Method \code{values()}}{
Get all values.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{omapR$values()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
The values, a list of numeric vectors.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{map <- omapR$new(
  keys = c("a", "b"), values = list(c(1, 2), c(3, 4, 5))
)
map$values()
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-items"></a>}}
\if{latex}{\out{\hypertarget{method-items}{}}}
\subsection{Method \code{items()}}{
Get all entries.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{omapR$items()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
The entries in a dataframe.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{map <- omapR$new(
  keys = c("a", "b"), values = list(c(1, 2), c(3, 4, 5))
)
map$items()
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-toList"></a>}}
\if{latex}{\out{\hypertarget{method-toList}{}}}
\subsection{Method \code{toList()}}{
Converts the map to a named list.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{omapR$toList()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A named list.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{map <- omapR$new(
  keys = c("a", "b"), values = list(c(1, 2), c(3, 4, 5))
)
map$toList()
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-at"></a>}}
\if{latex}{\out{\hypertarget{method-at}{}}}
\subsection{Method \code{at()}}{
Returns the value corresponding to the given key.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{omapR$at(key, stop_if_not_found = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{key}}{a key (string)}

\item{\code{stop_if_not_found}}{a Boolean value, whether to stop if the key 
is not found, or to return \code{NaN}}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The value corresponding to the key, a R object.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{map <- omapR$new(
  keys = c("a", "b"), values = list(c(1, 2), c(3, 4, 5))
)
map$at("b")
map$at("x", stop_if_not_found = FALSE)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-index"></a>}}
\if{latex}{\out{\hypertarget{method-index}{}}}
\subsection{Method \code{index()}}{
Returns the index of the given key.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{omapR$index(key)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{key}}{a key (string)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The index of the key, or \code{NA} if it is not found.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{map <- omapR$new(
  keys = c("a", "b"), values = list(c(1, 2), c(3, 4, 5))
)
map$index("b")
map$index("x")
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-extract"></a>}}
\if{latex}{\out{\hypertarget{method-extract}{}}}
\subsection{Method \code{extract()}}{
Extract a submap from the reference map.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{omapR$extract(keys, inplace = FALSE, bydeleting = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{keys}}{some keys, a character vector; those which do not belong to 
the keys of the reference map will be ignored}

\item{\code{inplace}}{Boolean, whether to update the reference map or 
to return a new map}

\item{\code{bydeleting}}{Boolean, whether to construct the submap by 
deleting the keys which are not in \code{keys} or by starting 
from the empty submap and adding the entries}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
An \code{omapR} object if \code{inplace=FALSE}, 
  nothing otherwise.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{map <- omapR$new(
  keys = c("a", "b", "c"), 
  values = list(c(1, 2), c(3, 4, 5), c(6, 7))
)
map_copy <- map$copy()
map$extract(c("a", "c"))
map
map$extract(c("a", "c"), inplace = TRUE)
map
map_copy$extract(c("a", "c"), bydeleting = TRUE)
map_copy
map_copy$extract(c("a", "c"), inplace = TRUE, bydeleting = TRUE)
map_copy
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-has_key"></a>}}
\if{latex}{\out{\hypertarget{method-has_key}{}}}
\subsection{Method \code{has_key()}}{
Checks whether a key exists in the reference map.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{omapR$has_key(key)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{key}}{a key (string)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A Boolean value.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{map <- omapR$new(
  keys = c("a", "b"), 
  values = list(c(1, 2), c(3, 4, 5))
)
map$has_key("b")
map$has_key("x")
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-nth"></a>}}
\if{latex}{\out{\hypertarget{method-nth}{}}}
\subsection{Method \code{nth()}}{
Returns the n-th entry of the reference map.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{omapR$nth(n, stop_if_too_large = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{n}}{index, a positive integer}

\item{\code{stop_if_too_large}}{a Boolean value, whether to stop if \code{n}
is too large, or to return \code{NaN}}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A list with the key and the value at index \code{n}.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{map <- omapR$new(
  keys = c("a", "b"), values = list(c(1, 2), c(3, 4, 5))
)
map$nth(2)
map$nth(9, stop_if_too_large = FALSE)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-insert"></a>}}
\if{latex}{\out{\hypertarget{method-insert}{}}}
\subsection{Method \code{insert()}}{
Insert a new entry in the reference map.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{omapR$insert(key, value, replace = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{key}}{a key (string)}

\item{\code{value}}{a value (R object)}

\item{\code{replace}}{Boolean, whether to replace the value if the key is 
already present}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Nothing, this updates the map.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{map <- omapR$new(
  keys = c("a", "b"), 
  values = list(c(1, 2), c(3, 4, 5))
)
map$insert("c", c(6, 7))
map
map$insert("a", c(8, 9))
map
map$insert("a", c(8, 9), replace = TRUE)
map
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-erase"></a>}}
\if{latex}{\out{\hypertarget{method-erase}{}}}
\subsection{Method \code{erase()}}{
Erase the entries of the reference map whose keys are the 
  given ones.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{omapR$erase(keys)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{keys}}{some keys, a character vector}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Nothing, this updates the map.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{map <- omapR$new(
  keys = c("a", "b", "c"), 
  values = list(c(1, 2), c(3, 4, 5), c(6, 7))
)
map$erase("a")
map
map$erase(c("b", "c"))
map
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-merge"></a>}}
\if{latex}{\out{\hypertarget{method-merge}{}}}
\subsection{Method \code{merge()}}{
Merge the reference map with another map.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{omapR$merge(map, duplicated = "drop")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{map}}{an \code{omapR} object}

\item{\code{duplicated}}{the action to perform if the reference map 
and \code{map} have some identical keys, one of 
\code{"drop"}, \code{"join"}, or \code{"separate"}}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Nothing, this updates the reference map.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{map1 <- omapR$new(
  keys = c("a", "b"), values = list(c(1, 2), c(3, 4, 5))
)
map2 <- omapR$new(
  keys = c("c", "d"), values = list(c(9, 8), c(7, 6))
)
map1$merge(map2)
map1

# `duplicated` example ####
map1 <- omapR$new(
  keys = c("a", "b"), values = list(c(1, 2), c(3, 4, 5))
)
map1_copy1 <- map1$copy()
map1_copy2 <- map1$copy()
map1_copy3 <- map1$copy()
map2 <- omapR$new(
  keys = c("a", "d"), values = list(c(9, 8), c(7, 6))
)
map1_copy1$merge(map2)
map1_copy1

map1_copy2$merge(map2, duplicated = "join")
map1_copy2

map1_copy3$merge(map2, duplicated = "separate")
map1_copy3
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-copy"></a>}}
\if{latex}{\out{\hypertarget{method-copy}{}}}
\subsection{Method \code{copy()}}{
Copy the reference map.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{omapR$copy()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A copy of the reference map.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{map <- omapR$new(
  c("a", "b"), 
  list(c(1,2), c(FALSE, TRUE))
)
true_copy <- map$copy()
true_copy$erase("a")
map
naive_copy <- map
naive_copy$erase("a")
map
}
\if{html}{\out{</div>}}

}

}
}
