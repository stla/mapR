% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mapR.R
\name{mapR}
\alias{mapR}
\title{R6 class representing a map}
\description{
A map is given by keys and values.
}
\examples{

## ------------------------------------------------
## Method `mapR$new`
## ------------------------------------------------

map <- mapR$new(keys = c("a", "b"), values = list(c(1, 2), c(3, 4, 5)))

## ------------------------------------------------
## Method `mapR$size`
## ------------------------------------------------

map <- mapR$new(
  keys = c("a", "b"), values = list(c(1, 2), c(3, 4, 5))
)
map$size()

## ------------------------------------------------
## Method `mapR$keys`
## ------------------------------------------------

map <- mapR$new(
  keys = c("a", "b"), values = list(c(1, 2), c(3, 4, 5))
)
map$keys()

## ------------------------------------------------
## Method `mapR$values`
## ------------------------------------------------

map <- mapR$new(
  keys = c("a", "b"), values = list(c(1, 2), c(3, 4, 5))
)
map$values()

## ------------------------------------------------
## Method `mapR$items`
## ------------------------------------------------

map <- mapR$new(
  keys = c("a", "b"), values = list(c(1, 2), c(3, 4, 5))
)
map$items()

## ------------------------------------------------
## Method `mapR$toList`
## ------------------------------------------------

map <- mapR$new(
  keys = c("a", "b"), values = list(c(1, 2), c(3, 4, 5))
)
map$toList()

## ------------------------------------------------
## Method `mapR$at`
## ------------------------------------------------

map <- mapR$new(
  keys = c("a", "b"), values = list(c(1, 2), c(3, 4, 5))
)
map$at("b")
map$at("x", stop_if_not_found = FALSE)

## ------------------------------------------------
## Method `mapR$has_key`
## ------------------------------------------------

map <- mapR$new(
  keys = c("a", "b"), values = list(c(1, 2), c(3, 4, 5))
)
map$has_key("b")
map$has_key("x")

## ------------------------------------------------
## Method `mapR$nth`
## ------------------------------------------------

map <- mapR$new(
  keys = c("a", "b"), values = list(c(1, 2), c(3, 4, 5))
)
map$nth(2)

## ------------------------------------------------
## Method `mapR$insert`
## ------------------------------------------------

map <- mapR$new(
  keys = c("a", "b"), values = list(c(1, 2), c(3, 4, 5))
)
map$insert("c", c(6, 7))
map$keys()

## ------------------------------------------------
## Method `mapR$erase`
## ------------------------------------------------

map <- mapR$new(
  keys = c("a", "b"), values = list(c(1, 2), c(3, 4, 5))
)
map$erase("a")
map$keys()

## ------------------------------------------------
## Method `mapR$merge`
## ------------------------------------------------

map1 <- mapR$new(
  keys = c("a", "b"), values = list(c(1, 2), c(3, 4, 5))
)
map2 <- mapR$new(
  keys = c("c", "d"), values = list(c(9, 8), c(7, 6))
)
map1$merge(map2)
map1$items()
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{mapR$new()}}
\item \href{#method-print}{\code{mapR$print()}}
\item \href{#method-size}{\code{mapR$size()}}
\item \href{#method-keys}{\code{mapR$keys()}}
\item \href{#method-values}{\code{mapR$values()}}
\item \href{#method-items}{\code{mapR$items()}}
\item \href{#method-toList}{\code{mapR$toList()}}
\item \href{#method-at}{\code{mapR$at()}}
\item \href{#method-has_key}{\code{mapR$has_key()}}
\item \href{#method-nth}{\code{mapR$nth()}}
\item \href{#method-insert}{\code{mapR$insert()}}
\item \href{#method-erase}{\code{mapR$erase()}}
\item \href{#method-merge}{\code{mapR$merge()}}
\item \href{#method-clone}{\code{mapR$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Creates a new \code{mapR} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{mapR$new(keys, values)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{keys}}{keys}

\item{\code{values}}{v}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A \code{mapR} object.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{map <- mapR$new(keys = c("a", "b"), values = list(c(1, 2), c(3, 4, 5)))
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-print"></a>}}
\if{latex}{\out{\hypertarget{method-print}{}}}
\subsection{Method \code{print()}}{
Show instance of a \code{mapR} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{mapR$print(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{ignored}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-size"></a>}}
\if{latex}{\out{\hypertarget{method-size}{}}}
\subsection{Method \code{size()}}{
Size of the map.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{mapR$size()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
An integer, the number of entries.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{map <- mapR$new(
  keys = c("a", "b"), values = list(c(1, 2), c(3, 4, 5))
)
map$size()
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-keys"></a>}}
\if{latex}{\out{\hypertarget{method-keys}{}}}
\subsection{Method \code{keys()}}{
Get all keys.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{mapR$keys()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
The keys.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{map <- mapR$new(
  keys = c("a", "b"), values = list(c(1, 2), c(3, 4, 5))
)
map$keys()
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-values"></a>}}
\if{latex}{\out{\hypertarget{method-values}{}}}
\subsection{Method \code{values()}}{
Get all values.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{mapR$values()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
The values.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{map <- mapR$new(
  keys = c("a", "b"), values = list(c(1, 2), c(3, 4, 5))
)
map$values()
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-items"></a>}}
\if{latex}{\out{\hypertarget{method-items}{}}}
\subsection{Method \code{items()}}{
Get all entries.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{mapR$items()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
The entries in a dataframe.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{map <- mapR$new(
  keys = c("a", "b"), values = list(c(1, 2), c(3, 4, 5))
)
map$items()
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-toList"></a>}}
\if{latex}{\out{\hypertarget{method-toList}{}}}
\subsection{Method \code{toList()}}{
Converts the map to a list.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{mapR$toList()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A named list.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{map <- mapR$new(
  keys = c("a", "b"), values = list(c(1, 2), c(3, 4, 5))
)
map$toList()
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-at"></a>}}
\if{latex}{\out{\hypertarget{method-at}{}}}
\subsection{Method \code{at()}}{
Returns the value corresponding to the given key
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{mapR$at(key, stop_if_not_found = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{key}}{a key}

\item{\code{stop_if_not_found}}{a Boolean value, whether to stopo if the key 
is not found, or to return \code{NaN}}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a value
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{map <- mapR$new(
  keys = c("a", "b"), values = list(c(1, 2), c(3, 4, 5))
)
map$at("b")
map$at("x", stop_if_not_found = FALSE)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-has_key"></a>}}
\if{latex}{\out{\hypertarget{method-has_key}{}}}
\subsection{Method \code{has_key()}}{
Checks if a key exists.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{mapR$has_key(key)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{key}}{a string}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A Boolean value.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{map <- mapR$new(
  keys = c("a", "b"), values = list(c(1, 2), c(3, 4, 5))
)
map$has_key("b")
map$has_key("x")
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-nth"></a>}}
\if{latex}{\out{\hypertarget{method-nth}{}}}
\subsection{Method \code{nth()}}{
Returns the n-th entry.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{mapR$nth(n, stop_if_too_large = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{n}}{a positive integer}

\item{\code{stop_if_too_large}}{a Boolean value, whether to stop if \code{n}
is too large, or to return \code{NaN}}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A list with the key and the value at index \code{n}.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{map <- mapR$new(
  keys = c("a", "b"), values = list(c(1, 2), c(3, 4, 5))
)
map$nth(2)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-insert"></a>}}
\if{latex}{\out{\hypertarget{method-insert}{}}}
\subsection{Method \code{insert()}}{
Insert a new entry.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{mapR$insert(key, value)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{key}}{a key}

\item{\code{value}}{a value}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Nothing
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{map <- mapR$new(
  keys = c("a", "b"), values = list(c(1, 2), c(3, 4, 5))
)
map$insert("c", c(6, 7))
map$keys()
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-erase"></a>}}
\if{latex}{\out{\hypertarget{method-erase}{}}}
\subsection{Method \code{erase()}}{
Erase an entry.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{mapR$erase(key)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{key}}{a key}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Nothing
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{map <- mapR$new(
  keys = c("a", "b"), values = list(c(1, 2), c(3, 4, 5))
)
map$erase("a")
map$keys()
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-merge"></a>}}
\if{latex}{\out{\hypertarget{method-merge}{}}}
\subsection{Method \code{merge()}}{
Merge with another map.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{mapR$merge(map)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{map}}{a \code{mapR} object}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Nothing.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{map1 <- mapR$new(
  keys = c("a", "b"), values = list(c(1, 2), c(3, 4, 5))
)
map2 <- mapR$new(
  keys = c("c", "d"), values = list(c(9, 8), c(7, 6))
)
map1$merge(map2)
map1$items()
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{mapR$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
